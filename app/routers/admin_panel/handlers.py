import os

from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram_dialog import DialogManager

from app.database.dataclasses.admin_dataclass import Admin
from app.dialogs.admin_panel_dialog.admin_dialog_states import AdminPanelStatesGroup
from app.logs.logger import bot_logger
from app.routers.admin_panel.filters import IsAdminFilter, IsSuperAdminFilter

admin_panel = Router()


@admin_panel.message(IsSuperAdminFilter(), Command("add"))
async def add_new_admin(message: Message, state: FSMContext, dialog_manager: DialogManager, command: CommandObject):
    try:
        new_admin_telegram_id = int(command.args.strip())
    except (ValueError, AttributeError):
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID: /add <id>")
        return

    if Admin.add(new_admin_telegram_id):
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω —Å ID {new_admin_telegram_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –ê–¥–º–∏–Ω —Å ID {new_admin_telegram_id} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")


@admin_panel.message(IsSuperAdminFilter(), Command("remove"))
async def delete_admin(message: Message, state: FSMContext, dialog_manager: DialogManager, command: CommandObject):
    try:
        admin_telegram_id = int(command.args.strip())
    except (ValueError, AttributeError):
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID: /remove <id>")
        return

    if Admin.delete(admin_telegram_id):
        await message.answer(f"üóë –ê–¥–º–∏–Ω —Å ID {admin_telegram_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer(f"‚ùå –ê–¥–º–∏–Ω —Å ID {admin_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")


@admin_panel.message(IsSuperAdminFilter(), Command("list_admins"))
async def list_admins_handler(message: Message):
    # –û–±—ã—á–Ω—ã–µ –∞–¥–º–∏–Ω—ã –∏–∑ –±–∞–∑—ã (set, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ —É–±–∏—Ä–∞—Ç—å –¥—É–±–ª–∏)
    db_admins = {str(admin.telegram_id) for admin in Admin.all()}

    super_admins = {i.strip() for i in os.getenv("MAIN_ADMIN_TELEGRAM_IDS", "").split(",") if i.strip()}

    # –ò—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏ ‚Äî —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –≤ "–æ–±—ã—á–Ω—ã—Ö"
    db_admins -= super_admins

    def format_block(title: str, ids: set[str], emoji: str) -> str:
        if ids:
            return f"{emoji} <b>{title}</b>:\n" + "\n".join(f"‚Ä¢ <code>{i}</code>" for i in sorted(ids)) + "\n\n"
        return f"{emoji} <b>{title}</b>: (–Ω–µ—Ç)\n\n"

    response = (
            "üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
            + format_block("–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã", super_admins, "‚ú®")
            + format_block("–ê–¥–º–∏–Ω—ã", db_admins, "üõ°")
    )

    await message.answer(response.strip(), parse_mode="HTML")


@admin_panel.message(IsAdminFilter(), Command('admin'))
async def start_admin_panel_dialog(message: Message, state: FSMContext, dialog_manager: DialogManager):
    try:
        await dialog_manager.reset_stack()
    except Exception as e:
        bot_logger.warning(e)
    finally:
        await dialog_manager.start(
            AdminPanelStatesGroup.admin_panel_menu
        )


@admin_panel.message(IsSuperAdminFilter(), Command("help"))
async def help_admin_handler(message: Message):
    help_text = (
        "<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
        "/add &lt;id&gt; - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞. –£–∫–∞–∂–∏—Ç–µ Telegram ID.\n"
        "/remove &lt;id&gt; - —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø–æ Telegram ID.\n"
        "/list_admins - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤.\n"
        "/admin - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.\n"
    )

    await message.answer(help_text, parse_mode="HTML")

import os

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram_dialog import DialogManager

from src.database.dataclasses.admin import Admin
from src.database.dataclasses.chat_group import ChatGroup
from src.dialogs.admin_panel_dialog.admin_dialog_states import AdminPanelStatesGroup
from src.logs.logger import bot_logger
from src.filters.admin_filters import IsAdminFilter, IsSuperAdminFilter

admin_panel = Router()


@admin_panel.message(Command("add"), IsSuperAdminFilter())
async def add_new_admin(message: Message, state: FSMContext, dialog_manager: DialogManager, command: CommandObject):
    try:
        new_admin_telegram_id = int(command.args.strip())
    except (ValueError, AttributeError):
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID: /add <id>")
        return

    if Admin.add(new_admin_telegram_id):
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω —Å ID {new_admin_telegram_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –ê–¥–º–∏–Ω —Å ID {new_admin_telegram_id} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")


@admin_panel.message(Command("get_topic_id"))
async def get_topic_id(message: Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ —Ñ–æ—Ä—É–º–∞
    thread_id = getattr(message, "message_thread_id", None)

    if not thread_id:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–æ–ø–∏–∫ —Ñ–æ—Ä—É–º–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤–Ω—É—Ç—Ä–∏ —Ç–æ–ø–∏–∫–∞ GENERAL.")
        return

    await message.answer(f"‚ÑπÔ∏è ID —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞: {thread_id}")


@admin_panel.message(Command("set_group"), IsSuperAdminFilter())
async def set_group(message: Message, state: FSMContext, dialog_manager: DialogManager, command: CommandObject):
    try:
        args = command.args.strip().split()
        group_id = int(args[0])
        general_topic_id = int(args[1])
    except (ValueError, AttributeError, IndexError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_group <group_id> <general_topic_id>")
        return

    cg = ChatGroup.create(group_id=group_id, general_topic_id=general_topic_id)
    await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:\n"
                         f"- Group ID: {cg.group_id}\n"
                         f"- General topic ID: {cg.general_topic_id}")


@admin_panel.message(Command("get_group"), IsSuperAdminFilter())
async def get_group(message: Message, state: FSMContext, dialog_manager: DialogManager):
    cg = ChatGroup.get()
    if not cg:
        await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
        return

    await message.answer(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:\n"
                         f"- Group ID: {cg.group_id}\n"
                         f"- General topic ID: {cg.general_topic_id}")


@admin_panel.message(Command("update_group"), IsSuperAdminFilter())
async def update_group(message: Message, state: FSMContext, dialog_manager: DialogManager, command: CommandObject):
    if not command.args:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_group <group_id?> <general_topic_id?>")
        return

    args = command.args.strip().split()
    group_id = None
    general_topic_id = None

    if len(args) >= 1:
        try:
            group_id = int(args[0])
        except ValueError:
            pass
    if len(args) >= 2:
        try:
            general_topic_id = int(args[1])
        except ValueError:
            pass

    cg = ChatGroup.update(group_id=group_id, general_topic_id=general_topic_id)
    await message.answer(f"‚ôªÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
                         f"- Group ID: {cg.group_id}\n"
                         f"- General topic ID: {cg.general_topic_id}")


@admin_panel.message(Command("remove"), IsSuperAdminFilter())
async def delete_admin(message: Message, state: FSMContext, dialog_manager: DialogManager, command: CommandObject):
    try:
        admin_telegram_id = int(command.args.strip())
    except (ValueError, AttributeError):
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID: /remove <id>")
        return

    if Admin.delete(admin_telegram_id):
        await message.answer(f"üóë –ê–¥–º–∏–Ω —Å ID {admin_telegram_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer(f"‚ùå –ê–¥–º–∏–Ω —Å ID {admin_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")


@admin_panel.message(Command("list_admins"), IsSuperAdminFilter())
async def list_admins_handler(message: Message, state: FSMContext, dialog_manager: DialogManager,
                              command: CommandObject):
    # –û–±—ã—á–Ω—ã–µ –∞–¥–º–∏–Ω—ã –∏–∑ –±–∞–∑—ã (set, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ —É–±–∏—Ä–∞—Ç—å –¥—É–±–ª–∏)
    db_admins = {str(admin.telegram_id) for admin in Admin.all()}

    super_admins = {i.strip() for i in os.getenv("MAIN_ADMIN_TELEGRAM_IDS", "").split(",") if i.strip()}

    # –ò—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏ ‚Äî —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –≤ "–æ–±—ã—á–Ω—ã—Ö"
    db_admins -= super_admins

    def format_block(title: str, ids: set[str], emoji: str) -> str:
        if ids:
            return f"{emoji} <b>{title}</b>:\n" + "\n".join(f"‚Ä¢ <code>{i}</code>" for i in sorted(ids)) + "\n\n"
        return f"{emoji} <b>{title}</b>: (–Ω–µ—Ç)\n\n"

    response = (
            "üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
            + format_block("–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã", super_admins, "‚ú®")
            + format_block("–ê–¥–º–∏–Ω—ã", db_admins, "üõ°")
    )

    await message.answer(response.strip(), parse_mode="HTML")


@admin_panel.message(Command("help"), IsAdminFilter())
async def help_admin_handler(message: Message, state: FSMContext, command: CommandObject):
    help_text = (
        "<b>–ö–æ–º–∞–Ω–¥—ã —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        "‚ñ´Ô∏è <code>/add 123456789</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É–∫–∞–∂–∏—Ç–µ Telegram ID)\n"
        "‚ñ´Ô∏è <code>/remove 123456789</code> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ Telegram ID)\n"
        "‚ñ´Ô∏è <code>/list_admins</code> ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n"
        "<b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚ñ´Ô∏è <code>/id</code> ‚Äî —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "Ô∏è <code>/id_group</code> ‚Äî —É–∑–Ω–∞—Ç—å ID –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç.\n"
    )

    await message.answer(help_text, parse_mode="HTML")

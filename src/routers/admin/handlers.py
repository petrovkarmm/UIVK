import os

from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram_dialog import DialogManager

from src.database.dataclasses.admin import Admin
from src.database.dataclasses.chat_group import ChatGroup
from src.database.dataclasses.topic import Topic
from src.dialogs.admin_panel_dialog.admin_dialog_states import AdminPanelStatesGroup
from src.logs.logger import bot_logger
from src.filters.admin_filters import IsAdminFilter, IsSuperAdminFilter

admin_panel = Router()


@admin_panel.message(Command("add"), IsSuperAdminFilter())
async def add_new_admin(message: Message, state: FSMContext, dialog_manager: DialogManager, command: CommandObject):
    try:
        new_admin_telegram_id = int(command.args.strip())
    except (ValueError, AttributeError):
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID: /add <id>")
        return

    if Admin.add(new_admin_telegram_id):
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω —Å ID {new_admin_telegram_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –ê–¥–º–∏–Ω —Å ID {new_admin_telegram_id} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")


@admin_panel.message(Command("set_group"), IsSuperAdminFilter())
async def set_group(message: Message, state: FSMContext, dialog_manager: DialogManager, command: CommandObject):
    try:
        group_id = int(command.args.strip())
    except (ValueError, AttributeError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_group <group_id>")
        return

    cg = ChatGroup.create(group_id=group_id)
    await message.answer(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:\n"
        f"- Group ID: {cg.group_id}"
    )


@admin_panel.message(Command("get_group"), IsSuperAdminFilter())
async def get_group(message: Message, state: FSMContext, dialog_manager: DialogManager):
    cg = ChatGroup.get()
    if not cg:
        await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
        return

    await message.answer(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:\n"
                         f"- Group ID: {cg.group_id}")


@admin_panel.message(Command("remove"), IsSuperAdminFilter())
async def delete_admin(message: Message, state: FSMContext, dialog_manager: DialogManager, command: CommandObject):
    try:
        admin_telegram_id = int(command.args.strip())
    except (ValueError, AttributeError):
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID: /remove <id>")
        return

    if Admin.delete(admin_telegram_id):
        await message.answer(f"üóë –ê–¥–º–∏–Ω —Å ID {admin_telegram_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer(f"‚ùå –ê–¥–º–∏–Ω —Å ID {admin_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")


@admin_panel.message(Command("help"), IsAdminFilter())
async def admin_help_commands_handler(message: Message):
    await message.answer(
        text=f'–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
             f'/id - –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π)\n'
             f'/list_admins - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n'
             f'–ö–æ–º–∞–Ω–¥—ã —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
             f'/add telegram_id - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
             f'/remove telegram_id - —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
             f'/get_group - –ø–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)\n'
             f'/set_group group_id - –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã\n\n'
             f'–ü–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —Ç–æ–ø–∏–∫–∞—Ö –º–æ–≥—É—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.'
    )


@admin_panel.message(Command("list_admins"), IsAdminFilter())
async def list_admins_handler(message: Message, state: FSMContext, dialog_manager: DialogManager,
                              command: CommandObject):
    # –û–±—ã—á–Ω—ã–µ –∞–¥–º–∏–Ω—ã –∏–∑ –±–∞–∑—ã (set, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ —É–±–∏—Ä–∞—Ç—å –¥—É–±–ª–∏)
    db_admins = {str(admin.telegram_id) for admin in Admin.all()}

    super_admins = {i.strip() for i in os.getenv("MAIN_ADMIN_TELEGRAM_IDS", "").split(",") if i.strip()}

    # –ò—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏ ‚Äî —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –≤ "–æ–±—ã—á–Ω—ã—Ö"
    db_admins -= super_admins

    def format_block(title: str, ids: set[str], emoji: str) -> str:
        if ids:
            return f"{emoji} <b>{title}</b>:\n" + "\n".join(f"‚Ä¢ <code>{i}</code>" for i in sorted(ids)) + "\n\n"
        return f"{emoji} <b>{title}</b>: (–Ω–µ—Ç)\n\n"

    response = (
            "üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
            + format_block("–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã", super_admins, "‚ú®")
            + format_block("–ê–¥–º–∏–Ω—ã", db_admins, "üõ°")
    )

    await message.answer(response.strip(), parse_mode="HTML")


@admin_panel.message(
    IsAdminFilter(),
    F.chat.type.in_({"group", "supergroup"}),
    F.text
)
async def admin_message_handler(message: Message):
    if message.from_user.is_bot:
        return

    thread_id = getattr(message, "message_thread_id", None)

    # –µ—Å–ª–∏ —ç—Ç–æ General ‚Äî —Å–∫–∏–ø–∞–µ–º
    if thread_id is None:
        return

    # –Ω–∞—Ö–æ–¥–∏–º —Ç–æ–ø–∏–∫ –≤ –±–∞–∑–µ
    topic = Topic.get_by_topic_id(thread_id)
    if not topic:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞.")
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await message.bot.send_message(
            chat_id=topic.user_id,
            text=message.text
        )
        await message.answer("‚ú® –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
